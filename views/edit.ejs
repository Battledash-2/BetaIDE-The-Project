<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Beta IDE -- <%= name %></title>
	<link rel="stylesheet" href="../../../css/style.css">
	<link rel="icon" href="../../../assets/logo.png">
	<style>
		#body form h1 {
			color: #e38d8d;
		}
		@media only screen and (max-width: 1204px) {
			#logo {
				width: 400px;
				height: 300px;
			}
		}
		@media only screen and (max-width: 808px) {
			#logo {
				display: none;
			}
		}

		@media only screen and (max-height: 600px) {
			#nav {
				height: 0; // technically invisible
			}
			.nav_btn {
				margin-top: 50px;
			}
			#body form h1 {
				display: none;
			}
			#nav_header {
				display: none;
			}
		}

		@media only screen and (max-width: 473px) {
			#nav {
				height: 0; // technically invisible
			}
			.nav_btn {
				margin-top: 50px;
			}
			#body form h1 {
				display: none;
			}
			#nav_header {
				display: none;
			}
		}

		@media only screen and (max-height: 800px) {
			#body {
				top: 0;
			}
		}
		.btn {
			position: absolute;
			z-index: 50;
		}
		#nav_header {
			position: absolute;
			top: -5px;
			width: 100vw;
			text-align: center;
		}
		#json-view {
			display: none;
		}
		.hljs {
			tab-size: 4;
		}
		body {
			overflow: hidden;
		}
	</style>
	<link rel="stylesheet"
      href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.6.0/styles/default.min.css">
	<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.6.0/highlight.min.js"></script>
	<script>
		const viewJson = function() {
			let jv = document.querySelector('#json-view');
			let bd = document.querySelector('#body');

			if(jv.style.display == "block") {
				jv.style.display = "none";
				bd.style.display = "block";
			} else {
				jv.style.display = "block";
				bd.style.display = "none";
			}

			try {
				let json = JSON.stringify(files);

				document.querySelector('#jView').innerText = json;
				document.querySelector('#jc-btw').value = 'https://betaide.repl.co/p/cli?data={"files":{'+encodeURIComponent(json)+'}}';
				hljs.highlightAll();
			} catch(e) {
				console.log('There was an error while trying to update JSON view. Log: ', e);
			}
		}
		const copyJson = function() {
			let jv = document.querySelector('#jView');
			let nv = document.createElement('textarea');

			nv.value = jv.innerText;
			nv.style.display = "none";
			
			document.body.appendChild(nv);
			nv.select();

			document.execCommand('copy');

			nv.remove();

			copied();
		}
		function copied() {
			let c = document.createElement('div');
			c.classList.add('ac-al');

			c.innerHTML = '<h1 class="ac-al-h1">Copied Text</h1>';

			document.body.appendChild(c);
			setTimeout(()=>c.remove(), 1000);
		}
	</script>
	<style>
		.ac-al {
			position: absolute;
			bottom: 60px;
			right: 5px;
			width: 300px;
			height: 50px;
			background: lightblue;
			border-radius: 5px;
			text-align: center;
			display: grid;
			align-content: center;
			transition: display 1s ease;
		}
		.ac-al-h1 {
			font-size: 20px;
			color: #fff;
			font-family: Arial;
		}
	</style>
</head>
<body>
	<nav id='nav'>
		<button class='btn' onclick='cf()'>Create File</button>
		<h1 id='nav_header'>Beta IDE -- <span id='cf'></span></h1>
		<a id='ltv'>View</a>
		<a id='ltv-v2' href="javascript:viewJson();">JSON</a>
	</nav>
	<div id="json-view">
		<style>
			#jView {
				width: 99vw;
				height: calc(100vh - 100px);
				position: absolute;
				top: 50px;
				overflow: auto;
				overflow-x: hidden;
				word-wrap: break-word;
				white-space: pre-wrap;
			}
			#jc-bt {
				position: absolute;
				right: 0;
				bottom: 0;
			}
			#jc-btz {
				position: absolute;
				bottom: 0;
				left: 5px;
			}
			#jc-btz:hover {
				background: -internal-light-dark(rgb(239, 239, 239), rgb(59, 59, 59)) !important;
			}
			#jc-btw {
				position: absolute;
				bottom: 0;
				left: 260px;
				width: calc(100vw - 515px);
				cursor: text;
				overflow-x: auto;
				word-wrap: no-wrap;
				outline: none;
			}
			/* width */
			::-webkit-scrollbar {
				width: 10px;
			}

			/* Track */
			::-webkit-scrollbar-track {
				background: #f1f1f1;
			}

			/* Handle */
			::-webkit-scrollbar-thumb {
				background: #888;
			}

			/* Handle on hover */
			::-webkit-scrollbar-thumb:hover {
				background: #555;
			}
		</style>
		<pre>
			<code id="jView" class="hljs language-json">
			</code>
		</pre>
		<button class="btn" id="jc-bt" onclick="copyJson()">Copy</button>
		<input class="btn" id="jc-btw">
		<button class="btn" id="jc-btz" onclick="copyJson()">API Link</button>
	</div>
	<div id='body'>
		<style>
			#ltv {
				position: absolute;
				right: 0;
				height: 50px;
				width: 70px;
				top: 0;
				text-decoration: none;
				color: #fff;
				display: grid;
				align-content: center;
				background: #8c8c8c;
				cursor: pointer;
			}
			#ltv:hover {
				background: #6b6a6a;
			}
			#ltv-v2 {
				position: absolute;
				right: 70px;
				height: 50px;
				width: 70px;
				top: 0;
				text-decoration: none;
				color: #fff;
				display: grid;
				align-content: center;
				background: #8c8c8c;
				cursor: pointer;
			}
			#ltv-v2:hover {
				background: #6b6a6a;
			}
			#files {
				position: absolute;
				top: 50px;
				left: 0;
				right: 0;
				background: #333;
				width: 20vw;
				height: calc(100vh - 53.5px);
				font-family: Consolas;
				overflow: auto;
			}
		</style>
		<div id='files'>
			<!--This will display all the files-->
			<div id='fhold' style="position: absolute; left: -99999999px; white-space: pre-wrap"><%= files %></div>
			<script>
				function cf() {
					let fname = prompt('What would you like to name the file?', 'New File');
					if(fname.trim() == "") {
						return cf();
					}
					if(files[fname]) {
						let c = confirm('A file with that name already exists. Would you like to continue?');
						if(!c) return;
					}
					files[fname] = "";
					uda();
				}
				function mimeFromName(fname) {
					let mimeTypes = {
						"html": "text/html",
						"txt": "text/plain",
						"css": "text/css",
						"js": "application/javascript",
						"svg": "image/svg+xml",
						"png": "image/png",
						"jpg": "image/jpeg",
						"jpeg": "image/jpeg",
						"ide": "application/json",
						"json": "application/json",
						"mjs": "application/javascript",
						"jsm": "application/javascript"
					};
					for(var ext in mimeTypes) {
						if(fname.endsWith('.'+ext)) {
							return mimeTypes[ext];
						}
					}

					return 'text/plain';
				}
				var files = JSON.parse(document.querySelector('#fhold').innerText);
				
				//document.querySelector('#fhold').remove();

				// we need to display the files
				// the files object is a copy of the files inside of the db
				function addFIn(sel, obj, oname) {
					sel = document.querySelector(sel) || sel;
					for(var n in obj) {
						if(typeof obj[n] == 'string') {
							// this is a file
							let container = document.createElement('div');
							container.classList.add('file');
							container.style.width = '20vw';
							container.style.height = '50px';
							container.style.background = '#3d3c3c';
							container.style.color = '#fff';
							container.style.display = 'grid';
							container.style.alignContent = 'center';
							container.style.textAlign = 'center';
							container.style.cursor = 'pointer';
							container.setAttribute('fname', n);

 							container.innerText = n+'\n'+mimeFromName(n)+' File';
							if(n == 'index.html') {
								container.style.background = '#616161';
								container.setAttribute('selected_file', ''); // it actually worked :O
							}

							let delb = document.createElement('button');
							delb.style.width = '30px';
							delb.style.height = '50px';
							delb.style.color = 'red';
							delb.innerText = 'X';
							delb.style.fontFamily = 'monospace';
							delb.style.fontSize = '40px';
							delb.style.position = 'relative';
							delb.style.left = 'calc(20vw - 30px)';
							delb.style.marginTop = '-38px';
							delb.style.cursor = 'pointer';

							delb.onclick = ()=>{
								for(var fn in files) {
									if(typeof files[fn] == 'string') {
										if(n == fn) {
											container.remove();
											document.querySelector('#text-edit').value = '';
											highlight();
											currentFile = 'index.html';
											setTimeout(()=>{
											delete files[fn]; currentFile = 'index.html';
											document.querySelector("#text-edit").value = files['index.html'];
											highlight('#editor', 'html');
											}, 50);
										}
									}
								}
							}

							sel.appendChild(container);
							container.appendChild(delb);
						}
					}
				}
				addFIn('#files', files);
			</script>
		</div>
		<style>
			#editor {
				position: absolute;
				left: 20vw !important;
				top: 50px !important;
				width: calc(100vw - 20.15vw);
				height: calc(100vh - 55.05px);
				font-size: 20px;
				background: #252626;
				color: #fff;
				font-family: monospace;
				tab-size: 4;
				white-space: pre-wrap;
				word-wrap: break-word;
				display: block;
				pointer-events: none;
				z-index: 98;
				color: #fff;
				overflow: auto;
			}
			#editor:after {
				content: ' ';
			}
			#text-edit {
				position: absolute;
				left: 20vw !important;
				top: 50px !important;
				width: calc(100vw - 20.15vw);
				height: calc(100vh - 55.05px);
				font-size: 20px;
				font-family: monospace;
				background: transparent;
				color: #fff;
				tab-size: 4;
				caret-color: #fff;
				outline: none;
				z-index: 99;
				color: transparent;
				overflow: auto;
				resize: none;
			}
		</style>
		<textarea id="text-edit"></textarea>
		<div id="editor"></div>
		<script src='/socket.io/socket.io.js'></script>
		<script src='/../../../assets/darkmode.js'></script>
		<script src='/../../../assets/lightmode.js'></script>
		<div id='cname' style='white-space: pre-wrap'><%= name %></div>
		<div id='uname' style='white-space: pre-wrap'><%= owner %></div>
		<script>
			const socket = io();
			const project_name = document.querySelector('#cname').innerText;
			const user_name = document.querySelector('#uname').innerText;
			document.querySelector('#uname').remove();
			document.querySelector('#cname').remove();
			let currentFile = 'index.html';
			let didd = false;
			function main() {
				document.querySelector('#cf').innerText = currentFile;
				document.querySelector('#ltv').href = 'javascript:open("https://' + location.hostname + '/p/view/' + user_name + '/' + project_name + '/")';
			}
			setInterval(main, 300);
			let edits = false;
			function glang(fname) {
				let langs = {
					"txt": "text",
					"html": "html",
					"css": "css",
					"js": "js",
					"svg": "html",
					"xml": "html",
					"json": "js",
					"ide": "js",
					"mjs": "js",
					"jsm": "js"
				}
				let res = 'text';
				for(var i in langs) {
					if(fname.endsWith('.'+i)) {
						res = langs[i]
					}
				}
				return res;
			}
			function scroll() {
				const edt = document.querySelector('#editor');
				const tedt = document.querySelector('#text-edit');
				edt.scrollTop = tedt.scrollTop;
				edt.scrollLeft = tedt.scrollLeft;
			}
			function highlight(m='html') {
				files[currentFile] = document.querySelector('#text-edit').value;
				let lang = glang(currentFile);
				if(lang == 'text') {
					const edt = document.querySelector('#editor');
					const tedt = document.querySelector('#text-edit');
					
					edt.innerText = tedt.value;
					scroll();
					return true;
				} else {
					m = lang;
				}
				const edt = document.querySelector('#editor');
				const tedt = document.querySelector('#text-edit');
				edt.innerHTML = tedt.value.replace(/&/gmi, '&amp;').replace(/</gmi, '&lt;').replace(/>/gmi, '&gt;').replace(/\n/gmi, '<br><span></span>');
				dhighlight('editor', m);
				scroll();
			}
			setTimeout(highlight, 1);
			document.querySelector('#text-edit').onscroll = scroll;
			document.querySelector('#text-edit').oninput = highlight;
			//setInterval(highlight, 400);
			document.querySelector('#text-edit').value = files['index.html'];
			function insertText(elm, text) {
				elm = document.querySelector(elm) || elm;
				let ss = elm.selectionStart;

				elm.value = elm.value.substring(0,elm.selectionStart) + text + elm.value.substring(elm.selectionStart);
				elm.selectionEnd = ss+text.length;
			}
			let r = false;
			document.querySelector('#text-edit').onkeydown = (e)=>{
				edits=true;
				if(e.code.toLowerCase() == 'tab') {
					e.preventDefault();

					insertText('#text-edit', '\t');
					highlight();
				} else if(e.code.toLowerCase() == 'enter') {
					e.preventDefault();
					let line = e.target.value.substring(0, e.target.selectionStart)[e.target.value.substring(0, e.target.selectionStart).length-1];
					let tabs = 0;
					try {
						tabs = line.split('\t').length+1;
					} catch(e) {
						0;
					}
					function r(str, tim=1) {
						let res = '';
						for(var i = 0; i<tim; i++) {
							res += str;
						}
						return res;
					}
					if(r) {insertText('#text-edit', '\n'+r('\t', tabs-1));r=false;return highlight();}
					r = true;
					insertText('#text-edit', '\n'+r('\t', tabs))
					highlight();
				}
			}

			onbeforeunload = ()=>{
				if(edits) {
					return 'changes';
				}
			}
			if(files == undefined) {files = {}}
			function autoSave() {
				let string_f = JSON.stringify(files) || '{}';
				//console.log(string_f);
				//btoa(unescape(encodeURIComponent('😂')));
				//btoa(unescape(encodeURIComponent('😂')));
				string_f = string_f.replace(/    /gmi, '\\t');
				//console.log(string_f);
				socket.emit('save', {
					"project": project_name,
					"files": string_f
				});
				console.log('Saved');
				//console.log({
				//	"project": project_name,
				//	"files": string_f
				//});
				edits = false;
			}
			setInterval(autoSave, 300);
			function uda() {
				document.querySelector("#files").innerHTML = '';
				addFIn('#files', files);
				// .file   [fname="*"]
				document.querySelectorAll('.file').forEach(file=>{
					let fname = file.getAttribute('fname');
					//#3d3c3c #616161

					if(fname in files) {
						file.onclick = ()=>{
							currentFile = fname;
							document.querySelector('#text-edit').value = files[currentFile];
							highlight();
							document.querySelectorAll('#files *').forEach(f=>{
								if(f instanceof HTMLDivElement) {
									f.style.background = '#3d3c3c';
								}
							});
							file.style.background = '#616161';
						}
					} else {
						console.log('Unknown file '+fname, fname in files);
					}
				});
			}
			uda();
		</script>
	</div>
</body>
</html>